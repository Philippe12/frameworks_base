/*
 * Copyright (C) 2010 The Android-x86 Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author: Yi Sun <beyounn@gmail.com>
 */

package com.android.server;

import java.net.UnknownHostException;
import android.net.EthernetDataTracker;
import android.net.ethernet.IEthernetManager;
import android.net.ethernet.EthernetManager;
import android.net.ethernet.EthernetDevInfo;
import android.provider.Settings;
import android.util.Slog;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.SystemProperties;
import android.os.UserHandle;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.File;
import android.net.InterfaceConfiguration;
import android.os.INetworkManagementService;
import android.os.IBinder;
import android.os.ServiceManager;
import java.io.FileInputStream;
import java.io.DataInputStream;
import android.os.RemoteException;
import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * EthernetService handles remote Ethernet operation requests by implementing
 * the IEthernetManager interface. It also creates a EtherentMonitor to listen
 * for Etherent-related events.
 *
 * @hide
 */
public class EthernetService extends IEthernetManager.Stub {
    private static final String TAG = "EthernetService";
    private static final int ETHERNET_HAS_CONFIG = 1;
    private static final boolean localLOGV = false;
	private final String SYS_NET = "/sys/class/net/";
	private String ETH_USED = "";

    private Context mContext;
    private HashMap<String, EthernetDevInfo> mDeviceMap;
    private EthernetDataTracker mTracker;
    private String[] DevName;
    private boolean mIsEnabled = false;
    private ContentResolver mCr;
    /* Persisted state that tracks the ethernet & airplane interaction from settings */
    private AtomicInteger mPersistEthernetState = new AtomicInteger(EthernetManager.ETHERNET_STATE_ENABLED);
    /* Tracks current airplane mode state */
    private AtomicBoolean mAirplaneModeOn = new AtomicBoolean(false);
	
	private final INetworkManagementService mNMService;

    public EthernetService(Context context) {
		
		IBinder b = ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
        mNMService = INetworkManagementService.Stub.asInterface(b);
        
		mTracker = EthernetDataTracker.getInstance();
		mDeviceMap = new HashMap<String, EthernetDevInfo>();
        mContext = context;
        mCr = mContext.getContentResolver();
        mAirplaneModeOn.set(isAirplaneModeOn());
        mPersistEthernetState.set(getPersistedState());
		//register for airplane mode change
        mContext.registerReceiver(
                new BroadcastReceiver() {
                    @Override
            public void onReceive(Context context, Intent intent) {
                boolean enabled = intent.getBooleanExtra("state", false);
                mAirplaneModeOn.set(enabled);
                handleAirplaneModeToggled(enabled);
                setState(1);
            }
                },
                new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED));
        setState(0);
    }

	/**
	/* Returns true if ethernet should be enabled, false otherwise
	*/
    private boolean shouldEthernetBeEnabled() {
        if (mAirplaneModeOn.get()) {
            return mPersistEthernetState.get() == EthernetManager.ETHERNET_ENABLED_AIRPLANE_OVERRIDE;
        } else {
            return mPersistEthernetState.get() != EthernetManager.ETHERNET_STATE_DISABLED;
        }
    }
	
	/**
	* Handle ethernet switch being toggled and enables ethernet or not
	*/
    public synchronized void setEnabled(boolean enable) {
		boolean airplaneEnabled = mAirplaneModeOn.get();
        if (enable) {
            if (airplaneEnabled) {
                persistState(EthernetManager.ETHERNET_ENABLED_AIRPLANE_OVERRIDE);
            } else {
                persistState(EthernetManager.ETHERNET_STATE_ENABLED);
            }
        } else {
            // When ethernet state is disabled, we do not care
            // if airplane mode is on or not. The scenario of
            // wifi being disabled due to airplane mode being turned on
            // is handled handleAirplaneModeToggled()
            persistState(EthernetManager.ETHERNET_STATE_DISABLED);
        }
		//updates ethernet state
		setState(0);
	}

	/**
	/* Handle airplane toggle, set ethernet state
	*/
    private void handleAirplaneModeToggled(boolean airplaneEnabled) {
        if (airplaneEnabled) {
            // Ethernet disabled due to airplane on
            if (mIsEnabled) {
                persistState(EthernetManager.ETHERNET_DISABLED_AIRPLANE_ON);
            }
        } else {
            /* On airplane mode disable, restore ethernet state if necessary */
            if (mPersistEthernetState.get() != EthernetManager.ETHERNET_STATE_DISABLED) {
                persistState(EthernetManager.ETHERNET_STATE_ENABLED);
            }
        }
    }

    /**
     * Returns true if airplane mode is
     * currently on.
     * @return {@code true} if airplane mode is on.
     */
    private boolean isAirplaneModeOn() {
        return Settings.Global.getInt(mContext.getContentResolver(),
                Settings.Global.AIRPLANE_MODE_ON, 0) == 1;
    }

    /**
     * check if the ethernet service has been configured.
     * @return {@code true} if configured {@code false} otherwise
     */
    public boolean isConfigured() {
        if (localLOGV == true) Slog.i(TAG, "isConfigured : In"+String.valueOf(Settings.Secure.getInt(mCr, Settings.Secure.ETHERNET_CONF, 0)));
    	return (Settings.Secure.getInt(mCr, Settings.Secure.ETHERNET_CONF, 0) == ETHERNET_HAS_CONFIG);

    }

    /**
     * Return the saved ethernet configuration
     * @return ethernet interface configuration on success, {@code null} on failure
     */
    public synchronized EthernetDevInfo getSavedConfig() {
       if (localLOGV == true) Slog.i(TAG, "getSavedConfig : In");
        if (!isConfigured())
            return null;

	EthernetDevInfo info = new EthernetDevInfo();
		try{
			info.setConnectMode(Settings.Secure.getInt(mCr, Settings.Secure.ETHERNET_MODE));
		} catch (Settings.SettingNotFoundException e) {
		}
        info.setIfName(Settings.Secure.getString(mCr, Settings.Secure.ETHERNET_IFNAME));
        info.setIpAddress(Settings.Secure.getString(mCr, Settings.Secure.ETHERNET_IP));
		info.setDnsAddr(Settings.Secure.getString(mCr, Settings.Secure.ETHERNET_DNS_PRIMARY),
		Settings.Secure.getString(mCr, Settings.Secure.ETHERNET_DNS_SECONDARY));
        info.setNetMask(Settings.Secure.getString(mCr, Settings.Secure.ETHERNET_MASK));
        info.setGateWay(Settings.Secure.getString(mCr, Settings.Secure.ETHERNET_ROUTE));

		try {
		InterfaceConfiguration config = mNMService.getInterfaceConfig(
											SystemProperties.get("ethernet.interface", "eth0") );
		info.setHwaddr(config.getHardwareAddress());
		} catch (RemoteException e ) {
		}
		
        return info;
    }

	/**
	 * Set the ethernet interface configuration mode
	 * @param mode {@code ETHERNET_CONN_MODE_DHCP} for dhcp {@code ETHERNET_CONN_MODE_MANUAL} for manual configure
	 */
	public synchronized void setMode(int mode) {
		if (DevName != null) {
			Settings.Secure.putString(mCr, Settings.Secure.ETHERNET_IFNAME, DevName[0]);
			Settings.Secure.putInt(mCr, Settings.Secure.ETHERNET_CONF, 1);
			Settings.Secure.putInt(mCr, Settings.Secure.ETHERNET_MODE, mode);
		}
	}

    /**
     * update a ethernet interface information
     * @param info  the interface infomation
     */
    public synchronized void updateDevInfo(EthernetDevInfo info) {
	if (localLOGV == true) Slog.i(TAG, "updateDevInfo : In");
	Settings.Secure.putInt(mCr, Settings.Secure.ETHERNET_CONF, 1);
        Settings.Secure.putString(mCr, Settings.Secure.ETHERNET_IFNAME, info.getIfName());
        Settings.Secure.putString(mCr, Settings.Secure.ETHERNET_IP, info.getIpAddress());
        Settings.Secure.putInt(mCr, Settings.Secure.ETHERNET_MODE, info.getConnectMode());
	String dns[] = info.getDnsAddr();
	Settings.Secure.putString(mCr, Settings.Secure.ETHERNET_DNS_PRIMARY, dns[0]);
	Settings.Secure.putString(mCr, Settings.Secure.ETHERNET_DNS_SECONDARY, dns[1]);
        Settings.Secure.putString(mCr, Settings.Secure.ETHERNET_ROUTE, info.getGateWay());
        Settings.Secure.putString(mCr, Settings.Secure.ETHERNET_MASK, info.getNetMask());
        if (mPersistEthernetState.get() == EthernetManager.ETHERNET_STATE_ENABLED) {
            mTracker.teardown();
            mTracker.setDevConfiguration(info);
            mTracker.reconnect();
        }
		if ((info != null) && mDeviceMap.containsKey(info.getIfName())){
			mDeviceMap.put(info.getIfName(), info);
		}
    }

	/**
	 * get the number of ethernet interfaces in the system
	 * @return the number of ethernet interfaces
	 */
	public int getTotalInterface() {
		int total = 0;
		synchronized(mDeviceMap) {
			total = mDeviceMap.size();
		}
		return total;
	}

    // private int scanDevice() {
    //     int i, j;
    //     if ((i = EthernetNative.getInterfaceCnt()) == 0)
    //         return 0;

    //     DevName = new String[i];

    //     for (j = 0; j < i; j++) {
    //         DevName[j] = EthernetNative.getInterfaceName(j);
    //         if (DevName[j] == null)
    //             break;
    //         if (localLOGV) Slog.v(TAG, "device " + j + " name " + DevName[j]);
    //     }

    //     return i;
    // }

    // /**
    //  * get all the ethernet device names
    //  * @return interface name list on success, {@code null} on failure
    //  */
    // public String[] getDeviceNameList() {
    //     return (scanDevice() > 0) ? DevName : null;
    // }

	/**
	/* Get ethernet state from Settings.Secure provider
	*/
    private int getPersistedState() {
	try {
            return Settings.Secure.getInt(mCr, Settings.Secure.ETHERNET_ON);
        } catch (Settings.SettingNotFoundException e) {
            return EthernetManager.ETHERNET_STATE_ENABLED;
        }
    }

	/**
	/* Set ethernet state in Settings.Secure provider
	*/
    private synchronized void persistState(int state) {
		mPersistEthernetState.set(state);
        Settings.Secure.putInt(mCr, Settings.Secure.ETHERNET_ON, state);
     }

    /**
     * Updates ethernet state, start or stop ethernet data  tracker
     */
    public synchronized void setState(int state) {
        EthernetDevInfo info = null;    
	if (localLOGV == true) Slog.i(TAG, "setState : In");
		int stateToSend = EthernetManager.ETHERNET_STATE_ENABLED; 
		//if true ethernet state will be broadcasted
        boolean needToSendState = false;
		if (localLOGV == true) Slog.i(TAG, "set state persistEthernetState "+mPersistEthernetState.get());
        if(shouldEthernetBeEnabled()) {
            //only enable ethernet if it was disabled before & if it needs to be enabled
            //avoid to reconnect ethernet when ethernet has been enabled in flight mode
            if(!mIsEnabled) {
                if (localLOGV == true) Slog.i(TAG, "set state ethernet enabled");
                mIsEnabled = true;
                stateToSend = EthernetManager.ETHERNET_STATE_ENABLED;
                if (!isConfigured()) {
                    // If user did not configure any interfaces yet, pick the first one
                    // and enable it.
                    if (localLOGV == true) Slog.i(TAG, "setState : Not configured, create DHCP conf");
                    setMode(EthernetDevInfo.ETHERNET_CONN_MODE_DHCP);
                    info = new EthernetDevInfo();

                    info.setConnectMode(EthernetDevInfo.ETHERNET_CONN_MODE_DHCP);
                    info.setIfName(Settings.Secure.getString(mCr, Settings.Secure.ETHERNET_IFNAME));
                    info.setIfName(SystemProperties.get("ethernet.interface", "eth0"));
                } else {
                    info = getSavedConfig();
                }
                mTracker.setEnabled(true);
                mTracker.setDevConfiguration(info);
                mTracker.reconnect();
                needToSendState = true;
            }
        }
        else {
            if(mIsEnabled) {
                mIsEnabled = false;
                if (localLOGV == true) Slog.i(TAG, "set state ethernet not enabled");
                mTracker.setEnabled(false);
                stateToSend = EthernetManager.ETHERNET_STATE_DISABLED;
                mTracker.disconnect();
                needToSendState = true;
            }
        }
        if(needToSendState) {
            if (localLOGV == true) Slog.i(TAG, "broadcast ethernet state " + stateToSend);
            //notify and send broadcast when ethernet state changed (used to update Quicksettings & ethernet switch in Settings app)
            Intent intent = new Intent(EthernetManager.ETHERNET_STATE_CHANGED_ACTION);
            //need to add this flag otherwise service won't be created before boot (will receive send broadcast before boot exception)
            intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
            intent.putExtra(EthernetManager.EXTRA_ETHERNET_STATE, stateToSend);
            mContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL);
        }
    }

    /**
     * Get ethernet service state
     * @return the state of the ethernet service
     */
    public int getState( ) {
	if (localLOGV == true) Slog.i(TAG, "getState : In");
        return mPersistEthernetState.get();
    }

	/**
	 * Checkout if the interface linkup or not.
	 */
	public int CheckLink(String ifname) {
		int ret = 0;
		File filefd = null;
		FileInputStream fstream = null;
		String s = null;
		try{
			if(!(new File(SYS_NET + ifname).exists()))
				return -1;
			fstream = new FileInputStream(SYS_NET + ifname + "/carrier");
			DataInputStream in = new DataInputStream(fstream);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));

			s = br.readLine();
		} catch (IOException ex) {
		} finally {
			if (fstream != null) {
				try{
					fstream.close();
				} catch (IOException ex) {
				}
			}
		}
		if(s != null && s.equals("1"))
			ret = 1;
		return ret;
	}
	
	/**
	 * remove the ethernet interface to Service Managing
	 * @param the name of ethernet interface
	 */
	public void  removeInterfaceFormService(String name) {
		if(!isEth(name))
			return ;
		synchronized(mDeviceMap) {
			if(mDeviceMap.containsKey(name)){
				sendChangedBroadcast(mDeviceMap.get(name), EthernetManager.EVENT_DEVREM);
				mDeviceMap.remove(name);
			}
		}
	}

	/**
	 * add the ethernet interface to Service Managing
	 * @param the name of ethernet interface
	 */
	public boolean addInterfaceToService(String iface) {
		if(!isEth(iface))
			return false;
		if(ETH_USED.isEmpty())
			ETH_USED = iface;
		if(!(new File(SYS_NET + iface + "/ifindex").exists()))
			return false;
		synchronized(mDeviceMap) {
			try{
				if(!mDeviceMap.containsKey(iface)){
					EthernetDevInfo value = new EthernetDevInfo();
					InterfaceConfiguration config = mNMService.getInterfaceConfig(iface);
					value.setIfName(iface);
					value.setHwaddr(config.getHardwareAddress());
					value.setIpAddress(config.getLinkAddress().getAddress().getHostAddress());
					mDeviceMap.put(iface, value);
					sendChangedBroadcast(value, EthernetManager.EVENT_NEWDEV);
				}
			} catch (RemoteException e) {
				Slog.e(TAG, "Can't get the Interface Configure" + e);
			}
		}
		return true;
	}
	
	/**
	 * Checkout if the ethernet dhcp
	 * @return the number of ethernet interfaces
	 */
	public synchronized boolean isDhcp() {
		try{
			return Settings.Secure.getInt(mCr, Settings.Secure.ETHERNET_MODE) == 0 ? false : true;
		} catch (Settings.SettingNotFoundException e) {
			return false;
		}
	}

	/**
	 * Checkout if the ethernet open
	 * @return the boolean of ethernet open 
	 */
	public synchronized boolean isOn() {
		try{
			return Settings.Secure.getInt(mCr, Settings.Secure.ETHERNET_ON) == 0 ? false : true;
		} catch (Settings.SettingNotFoundException e) {
			return false;
		}
	}

	/**
	 * get all the ethernet device names
	 * @return interface name list on success, {@code null} on failure
	 */
	public List<EthernetDevInfo> getDeviceNameList() {
		List<EthernetDevInfo> reDevs = new ArrayList<EthernetDevInfo>();

		synchronized(mDeviceMap){
			if(mDeviceMap.size() == 0)
				return null;
			for(EthernetDevInfo devinfo : mDeviceMap.values()){
				reDevs.add(devinfo);
			}
		}
		return reDevs;
	}
	
	private boolean isEth(String ifname) {
		if(ifname.startsWith("sit") || ifname.startsWith("lo") || ifname.startsWith("ppp")
				|| ifname.startsWith("ippp") || ifname.startsWith("tun")
				|| ifname.startsWith("gre") || ifname.startsWith("ip6"))
			return false;
		if(new File(SYS_NET + ifname + "/phy80211").exists())
			return false;
		if(new File(SYS_NET + ifname + "/wireless").exists())
			return false;
		if(new File(SYS_NET + ifname + "/wimax").exists())
			return false;
		if(new File(SYS_NET + ifname + "/bridge").exists())
			return false;

		return true;
	}

    private void sendChangedBroadcast(EthernetDevInfo info, int event) {
        Intent intent = new Intent(EthernetManager.ETHERNET_STATE_CHANGED_ACTION);
        intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT
                | Intent.FLAG_RECEIVER_REPLACE_PENDING);
        intent.putExtra(EthernetManager.EXTRA_ETHERNET_INFO, info);
		intent.putExtra(EthernetManager.EXTRA_ETHERNET_STATE, event);
        mContext.sendStickyBroadcast(intent);
    }
}
